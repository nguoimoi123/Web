'use client';
import { useState, useEffect } from 'react';
import { useRouter } from 'next/navigation';
import PaymentForm from './formpay';
import { Tabs } from "flowbite-react";
import { Table } from "flowbite-react";
import Nav from '../include/nav';
import { Footers } from "../../Components/Footer";

export default function CartPage() {
  const [cart, setCart] = useState([]);
  const [showPaymentModal, setShowPaymentModal] = useState(false);
  const [isAuthenticated, setIsAuthenticated] = useState(false);
  const [totalPrice, setTotalPrice] = useState(0); // T·ªïng gi√° gi·ªè h√†ng
  const [shippingData, setShippingData] = useState([]);
  const router = useRouter();

  useEffect(() => {
    // L·∫•y user_id t·ª´ localStorage
    const user_id = localStorage.getItem('user_id');
    const role = localStorage.getItem('role');
    console.log(user_id);
    console.log(role);
    if (role== 0) {
      setIsAuthenticated(true);
      fetchCartData(user_id); // G·ªçi API ƒë·ªÉ l·∫•y gi·ªè h√†ng c·ªßa ng∆∞·ªùi d√πng
    }
    const fetchShippingData = async () => {
      try {
        const response = await fetch("http://localhost:3000/api/acart");
        const data = await response.json();
        setShippingData(data); // L∆∞u danh s√°ch d·ªØ li·ªáu giao h√†ng
      } catch (error) {
        console.error("L·ªói khi l·∫•y th√¥ng tin giao h√†ng:", error);
      }
    };
    fetchShippingData();
  }, []);

  // H√†m g·ªçi API ƒë·ªÉ l·∫•y gi·ªè h√†ng t·ª´ server
  const fetchCartData = async (userId) => {
    try {
      const response = await fetch(`http://localhost:3000/api/ucart/${userId}`);
      if (!response.ok) {
        throw new Error('Kh√¥ng th·ªÉ t·∫£i gi·ªè h√†ng');
      }
      const data = await response.json();
      setCart(data); // C·∫≠p nh·∫≠t gi·ªè h√†ng
      calculateTotalPrice(data); // T√≠nh t·ªïng gi√° gi·ªè h√†ng
    } catch (error) {
      console.error('L·ªói khi l·∫•y gi·ªè h√†ng:', error);
      alert('C√≥ l·ªói x·∫£y ra khi l·∫•y gi·ªè h√†ng');
    }
  };

  const handleLoginRedirect = () => {
    localStorage.setItem('pendingCart', JSON.stringify(cart));
    router.push('/login?redirect=/cart');
  };

 // T√≠nh t·ªïng gi√° c·ªßa gi·ªè h√†ng
 const calculateTotalPrice = (cartItems) => {
  const total = cartItems.reduce((sum, data) => sum + data.price * data.quantity, 0);
  setTotalPrice(total);
};

  // C·∫≠p nh·∫≠t s·ªë l∆∞·ª£ng s·∫£n ph·∫©m
  const updateQuantity = async (productId, change) => {
    if (!isAuthenticated) return;

    // C·∫≠p nh·∫≠t s·ªë l∆∞·ª£ng s·∫£n ph·∫©m ·ªü gi·ªè h√†ng ngay l·∫≠p t·ª©c
    const updatedCart = cart.map((data) => {
      if (data.product_id === productId) {
        const newQuantity = data.quantity + change;
        if (newQuantity > 0) {
          return { ...data, quantity: newQuantity };
        }
      }
      return data;
    });
    
    setCart(updatedCart); // C·∫≠p nh·∫≠t gi·ªè h√†ng trong UI ngay l·∫≠p t·ª©c

    // G·ª≠i y√™u c·∫ßu PUT ƒë·ªÉ c·∫≠p nh·∫≠t s·ªë l∆∞·ª£ng
    const response = await fetch(`http://localhost:3000/api/ucart/${cart[0]?.user?.id}/${productId}`, {
      method: 'PUT',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({ quantity: updatedCart.find(data => data.product_id === productId).quantity }),
    });

    if (!response.ok) {
      alert('Kh√¥ng th·ªÉ c·∫≠p nh·∫≠t s·ªë l∆∞·ª£ng s·∫£n ph·∫©m');
    }
    setCart(updatedCart);
    calculateTotalPrice(updatedCart); // C·∫≠p nh·∫≠t l·∫°i t·ªïng gi√° sau khi thay ƒë·ªïi s·ªë l∆∞·ª£ng
    localStorage.setItem('cart', JSON.stringify(updatedCart));
  };

  // X√≥a s·∫£n ph·∫©m kh·ªèi gi·ªè h√†ng
  const removeFromCart = async (product_id) => {
    const updatedCart = cart.filter((data) => data.product_id !== product_id);
    const userId = cart[0]?.user?.id;

    setCart(updatedCart); // C·∫≠p nh·∫≠t gi·ªè h√†ng trong UI ngay l·∫≠p t·ª©c
    
    // G·ª≠i y√™u c·∫ßu DELETE ƒë·ªÉ x√≥a s·∫£n ph·∫©m
    const response = await fetch(`http://localhost:3000/api/ucart/${userId}/${product_id}`, {
      method: 'DELETE',
    });

    if (!response.ok) {
      alert('Kh√¥ng th·ªÉ x√≥a s·∫£n ph·∫©m kh·ªèi gi·ªè h√†ng');
    }
    calculateTotalPrice(updatedCart); // C·∫≠p nh·∫≠t l·∫°i t·ªïng gi√° sau khi x√≥a s·∫£n ph·∫©m
    localStorage.setItem('cart', JSON.stringify(updatedCart));
  };

  // X√≥a t·∫•t c·∫£ s·∫£n ph·∫©m kh·ªèi gi·ªè h√†ng
  const removeAllFromCart = async () => {
    const userId = cart[0]?.user?.id;

    if (userId) {
      const response = await fetch(`http://localhost:3000/api/ucart/${userId}`, {
        method: 'DELETE',
      });

      if (response.ok) {
        setCart([]); // X√≥a gi·ªè h√†ng trong UI ngay l·∫≠p t·ª©c
        localStorage.setItem('cart', JSON.stringify([])); // X√≥a gi·ªè h√†ng trong localStorage
      } else {
        alert('Kh√¥ng th·ªÉ x√≥a t·∫•t c·∫£ s·∫£n ph·∫©m');
      }
    }
    setTotalPrice(0); // ƒê·∫∑t l·∫°i t·ªïng gi√° gi·ªè h√†ng v·ªÅ 0
    localStorage.setItem('cart', JSON.stringify([])); // L∆∞u gi·ªè h√†ng tr·ªëng v√†o localStorage
  };

 const handleOpenPayment = () => {
    const productDetails = cart.map(data => ({
      product_id: data.product_id,
      quantity: data.quantity,
    }));
    setShowPaymentModal(true);;
  };

  const handleClosePayment = () => {
    setShowPaymentModal(false);
  };

  const handlePaymentSubmit = (paymentData) => {
    console.log('Thanh to√°n th√†nh c√¥ng v·ªõi d·ªØ li·ªáu:', paymentData);
  };
  const handleStateChange = async (cartId, newState) => {
    try {
      const response = await fetch(`http://localhost:3000/api/acarts/${cartId}`, {
        method: "PUT",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify({ state: newState }),
      });
  
      if (response.ok) {
        setShippingData((prevData) =>
          prevData.map((item) =>
            item.cart_id === cartId ? { ...item, state: newState } : item
          )
        );
      } else {
        alert("Kh√¥ng th·ªÉ c·∫≠p nh·∫≠t tr·∫°ng th√°i ƒë∆°n h√†ng.");
      }
    } catch (error) {
      console.error("L·ªói k·∫øt n·ªëi khi c·∫≠p nh·∫≠t tr·∫°ng th√°i:", error);
    }
  };
  
  return (
    <div
      className="flex flex-col min-h-screen" // T·∫°o layout ch√≠nh v·ªõi Flexbox
    >
    <main className='flex-1'>
      <Nav/>
      <h1 className="text-3xl font-bold text-gray-800 mb-6">üõí Gi·ªè h√†ng</h1>
      {!isAuthenticated && (
        <>
        <div className="auth-required-message bg-yellow-100 p-4 rounded-lg mb-6">
          <p className="text-yellow-800 mb-4">Vui l√≤ng ƒëƒÉng nh·∫≠p ƒë·ªÉ ti·∫øp t·ª•c v·ªõi gi·ªè h√†ng c·ªßa b·∫°n</p>
          <button
            onClick={handleLoginRedirect}
            className="bg-blue-500 text-white px-4 py-2 rounded hover:bg-blue-600"
          >
            ƒêƒÉng nh·∫≠p ngay
          </button>
        </div>
        </>
      )}

      {isAuthenticated && (
        <>
        <Tabs aria-label="Default tabs" variant="default">
      <Tabs.Item title="Gi·ªè h√†ng" >
      {cart.length === 0 ? (
            <p className="text-gray-600">Gi·ªè h√†ng tr·ªëng</p>
          ) : (
            <div className="grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 gap-6">
              {cart.map((product, index) => (
                <div key={`${product.product_id}-${index}`} className="border rounded-lg p-4 shadow-lg">
                  <h2 className="text-xl font-semibold">{product.product_name}</h2>
                  <img src={product.img_url} alt={product.product_name} className="w-full h-40 object-cover rounded mb-4" />
                  <p>Gi√°: {product.price} VNƒê</p>
                  <p>S·ªë l∆∞·ª£ng: {product.quantity}</p>
                  <p>Th√†nh ti·ªÅn: {product.price * product.quantity} VNƒê</p> {/* Hi·ªÉn th·ªã gi√° theo s·ªë l∆∞·ª£ng */}
                  <div className="flex datas-center space-x-4 mt-2">
                    <button onClick={() => updateQuantity(product.product_id, -1)} className="bg-gray-300 text-black px-3 py-1 rounded hover:bg-gray-400">‚ûñ</button>
                    <span className="text-lg">{product.quantity}</span>
                    <button onClick={() => updateQuantity(product.product_id, 1)} className="bg-gray-300 text-black px-3 py-1 rounded hover:bg-gray-400">‚ûï</button>
                  </div>
                  <button onClick={() => removeFromCart(product.product_id)} className="mt-2 bg-red-500 text-white px-4 py-2 rounded hover:bg-red-600">Xo√°</button>
                </div>
              ))}
            </div>
          )}
          <div className="mt-6">
            <p className="font-semibold text-lg">T·ªïng gi√°: {totalPrice} VNƒê</p> {/* Hi·ªÉn th·ªã t·ªïng gi√° gi·ªè h√†ng */}
          </div>
         
          <button onClick={removeAllFromCart} className="bg-red-500 text-white px-4 py-2 rounded hover:bg-red-600 mt-4">Xo√° T·∫•t C·∫£</button>
          <button className="bg-teal-500 text-white px-4 py-2 rounded hover:bg-teal-600 transition duration-300" onClick={handleOpenPayment} disabled={!isAuthenticated || cart.length === 0}>Thanh to√°n</button>
      </Tabs.Item>
      <Tabs.Item title="ƒê√£ ƒë·∫∑t h√†ng">
      {shippingData.filter((data) => data.state === 0).length > 0 ? (
        <Table>
      <Table.Head>
        <Table.HeadCell>T√™n ng∆∞·ªùi nh·∫≠n</Table.HeadCell>
        <Table.HeadCell>ƒê·ªãa ch·ªâ</Table.HeadCell>
        <Table.HeadCell>S·ªë ƒëi·ªán tho·∫°i</Table.HeadCell>
        <Table.HeadCell>Ph∆∞∆°ng th·ª©c thanh to√°n</Table.HeadCell>
        <Table.HeadCell>H√†nh ƒë·ªông</Table.HeadCell>
      </Table.Head>
      <Table.Body>
        {shippingData
          .filter((data) => data.state === 0)
          .map((data) => (
            <Table.Row key={data.cart_id}>
              <Table.Cell>{data.shipping.name}</Table.Cell>
              <Table.Cell>{data.shipping.address}</Table.Cell>
              <Table.Cell>{data.shipping.phone}</Table.Cell>
              <Table.Cell>{data.payment}</Table.Cell>
              <Table.Cell>
                <button
                  onClick={() => handleStateChange(data.cart_id, 4)} // Chuy·ªÉn tr·∫°ng th√°i th√†nh 4 (ƒê√£ h·ªßy)
                  className="text-red-600 hover:underline"
                >
                  H·ªßy ƒë∆°n
                </button>
              </Table.Cell>
            </Table.Row>
          ))}
      </Table.Body>
    </Table>
  ) : (
    <p className="text-gray-600">Kh√¥ng c√≥ d·ªØ li·ªáu giao h√†ng.</p>
  )}
      </Tabs.Item>
      <Tabs.Item title="V·∫≠n chuy·ªÉn" >
        {shippingData.filter((data) => data.state === 1).length > 0 ? (
      <Table>
        <Table.Head>
          
          <Table.HeadCell>T√™n ng∆∞·ªùi nh·∫≠n</Table.HeadCell>
          <Table.HeadCell>ƒê·ªãa ch·ªâ</Table.HeadCell>
          <Table.HeadCell>S·ªë ƒëi·ªán tho·∫°i</Table.HeadCell>
          <Table.HeadCell>Ph∆∞∆°ng th·ª©c thanh to√°n</Table.HeadCell>
        </Table.Head>
        <Table.Body>
        {shippingData
            .filter((data) => data.state === 1)
            .map((data) => (
            <Table.Row key={data.cart_id}>
              <Table.Cell>{data.shipping.name}</Table.Cell>
              <Table.Cell>{data.shipping.address}</Table.Cell>
              <Table.Cell>{data.shipping.phone}</Table.Cell>
              <Table.Cell>{data.payment}</Table.Cell>
            </Table.Row>
          ))}
        </Table.Body>
      </Table>
    ) : (
      <p className="text-gray-600">Kh√¥ng c√≥ d·ªØ li·ªáu giao h√†ng.</p>
    )}
          
      </Tabs.Item>
      <Tabs.Item title="Ch·ªù giao h√†ng" >
      {shippingData.filter((data) => data.state === 2).length > 0 ? (
    <Table>
      <Table.Head>
        
        <Table.HeadCell>T√™n ng∆∞·ªùi nh·∫≠n</Table.HeadCell>
        <Table.HeadCell>ƒê·ªãa ch·ªâ</Table.HeadCell>
        <Table.HeadCell>S·ªë ƒëi·ªán tho·∫°i</Table.HeadCell>
        <Table.HeadCell>Ph∆∞∆°ng th·ª©c thanh to√°n</Table.HeadCell>
      </Table.Head>
      <Table.Body>
      {shippingData
          .filter((data) => data.state === 2)
          .map((data) => (
          <Table.Row key={data.cart_id}>
            <Table.Cell>{data.shipping.name}</Table.Cell>
            <Table.Cell>{data.shipping.address}</Table.Cell>
            <Table.Cell>{data.shipping.phone}</Table.Cell>
            <Table.Cell>{data.payment}</Table.Cell>
          </Table.Row>
        ))}
      </Table.Body>
    </Table>
  ) : (
    <p className="text-gray-600">Kh√¥ng c√≥ d·ªØ li·ªáu giao h√†ng.</p>
  )}
        
      </Tabs.Item>
      <Tabs.Item title="ƒê√£ giao h√†ng" >
      {shippingData.filter((data) => data.state === 3).length > 0 ? (
    <Table>
      <Table.Head>
        <Table.HeadCell>T√™n ng∆∞·ªùi nh·∫≠n</Table.HeadCell>
        <Table.HeadCell>ƒê·ªãa ch·ªâ</Table.HeadCell>
        <Table.HeadCell>S·ªë ƒëi·ªán tho·∫°i</Table.HeadCell>
        <Table.HeadCell>Ph∆∞∆°ng th·ª©c thanh to√°n</Table.HeadCell>
      </Table.Head>
      <Table.Body>
      {shippingData
          .filter((data) => data.state === 3)
          .map((data) => (
          <Table.Row key={data.cart_id}>
            <Table.Cell>{data.shipping.name}</Table.Cell>
            <Table.Cell>{data.shipping.address}</Table.Cell>
            <Table.Cell>{data.shipping.phone}</Table.Cell>
            <Table.Cell>{data.payment}</Table.Cell>
          </Table.Row>
        ))}
      </Table.Body>
    </Table>
  ) : (
    <p className="text-gray-600">Kh√¥ng c√≥ d·ªØ li·ªáu giao h√†ng.</p>
  )}
        
      </Tabs.Item>
      <Tabs.Item title="ƒê√£ h·ªßy" >
      {shippingData.filter((data) => data.state === 4).length > 0 ? (
    <Table>
      <Table.Head>
        
        <Table.HeadCell>T√™n ng∆∞·ªùi nh·∫≠n</Table.HeadCell>
        <Table.HeadCell>ƒê·ªãa ch·ªâ</Table.HeadCell>
        <Table.HeadCell>S·ªë ƒëi·ªán tho·∫°i</Table.HeadCell>
        <Table.HeadCell>Ph∆∞∆°ng th·ª©c thanh to√°n</Table.HeadCell>
      </Table.Head>
      <Table.Body>
      {shippingData
          .filter((data) => data.state === 4)
          .map((data) => (
          <Table.Row key={data.cart_id}>
            <Table.Cell>{data.shipping.name}</Table.Cell>
            <Table.Cell>{data.shipping.address}</Table.Cell>
            <Table.Cell>{data.shipping.phone}</Table.Cell>
            <Table.Cell>{data.payment}</Table.Cell>
          </Table.Row>
        ))}
      </Table.Body>
    </Table>
  ) : (
    <p className="text-gray-600">Kh√¥ng c√≥ d·ªØ li·ªáu giao h√†ng.</p>
  )}
    
      </Tabs.Item>
    </Tabs>

        </>
      )}
      {showPaymentModal && <PaymentForm 
      onClose={handleClosePayment} 
      onSubmit={handlePaymentSubmit} 
      productDetails={cart}
      totalPrice={totalPrice}
      />}
       
    </main>
    <Footers/>
   </div>
  );

}
